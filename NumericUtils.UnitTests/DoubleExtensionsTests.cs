using NUnit.Framework;

namespace NumericUtils.UnitTests
{
    [TestFixture]
    public class DoubleExtensionsTests
    {
        [TestCase(-255.255, ExpectedResult = "1100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(255.255, ExpectedResult = "0100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(4294967295.0, ExpectedResult = "0100000111101111111111111111111111111111111000000000000000000000")]
        [TestCase(double.MinValue, ExpectedResult = "1111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.MaxValue, ExpectedResult = "0111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.Epsilon, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000001")]
        [TestCase(double.NegativeInfinity, ExpectedResult = "1111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(double.PositiveInfinity, ExpectedResult = "0111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(0.0, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(-0.0, ExpectedResult = "1000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(8.66119330064141740052664238764E128, ExpectedResult = "0101101010110011111111011111110110111111011111010111011111011111")]
        [TestCase(-7.3747237849291996099054813385E3, ExpectedResult = "1100000010111100110011101011100101001001111110000001100001000000")]
        [TestCase(-2.99952605668139866386179688505E-309, ExpectedResult = "1000000000000010001010000010101000000001100001100010000100100011")]
        [TestCase(9.99999999999999854480847716331E4, ExpectedResult = "0100000011111000011010011111111111111111111111111111111111111111")]
        [TestCase(-3.76559515811228894122401564611E-155, ExpectedResult = "1001111111100000001010000000001000000000000001100010000100100011")]
        [TestCase(6.39573802616561787336841942652E134, ExpectedResult = "0101101111101100001010000111011000000011100001100011110100100011")]
        [TestCase(8.98846567431157953864652595395E307, ExpectedResult = "0111111111100000000000000000000000000000000000000000000000000000")]
        [TestCase(-9.17401196517006486442004368482E105, ExpectedResult = "1101010111110000000000000000001000000000000110000000000000000000")]
        [TestCase(-0.25, ExpectedResult = "1011111111010000000000000000000000000000000000000000000000000000")]
        public string ToBinary_CorrectValuePassed_WorksCorrectly(double number)
        {
            return number.ToBinary();
        }
    }
}
